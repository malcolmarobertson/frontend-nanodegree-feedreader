/* feedreader.js
 *
 * This is the spec file that Jasmine will read and contains
 * all of the tests that will be run against your application.
 */

/* We're placing all of our tests within the $() function,
 * since some of these tests may require DOM elements. We want
 * to ensure they don't run until the DOM is ready.
 */
$(function() {
    /* This is our first test suite - a test suite just contains
    * a related set of tests. This suite is all about the RSS
    * feeds definitions, the allFeeds variable in our application.
    */
    describe('RSS Feeds', function() {
        /* This is our first test - it tests to make sure that the
         * allFeeds variable has been defined and that it is not
         * empty. Experiment with this before you get started on
         * the rest of this project. What happens when you change
         * allFeeds in app.js to be an empty array and refresh the
         * page?
         */
        it('are defined', function() {
            expect(allFeeds).toBeDefined();
            expect(allFeeds.length).toBeGreaterThan(0);
        });


        /* This loops through each feed
         * in the allFeeds object and ensures it has a URL defined
         * and that the URL is not empty.
         */
        function testUrl(feed) {
            it('url defined', function() {
                expect(feed.url).toBeDefined();
                expect(feed.url.length).toBeGreaterThan(0);
            });
        }

        for (var i = 0; i < allFeeds.length; i++) {
            testUrl(allFeeds[i]);
        }


        /* This tests each feed
         * in the allFeeds object and ensures it has a name defined
         * and that the name is not empty.
         */
        function testName(feed) {
            it('url defined', function() {
                expect(feed.name).toBeDefined();
               expect(feed.name.length).not.toBe(0);
            });
        }

        for (var j = 0; i < allFeeds.length; j++) {
            testName(allFeeds[j]);
        }
    });


    /* Test suite  */
    describe('The menu', function() {

        /* This test that ensures the menu element is
         * hidden by default.
         */

        it('should be hidden on page load', function() {
            expect($('body').hasClass('menu-hidden')).toBe(true);
        });

        /* This test that ensures the menu changes
         * visibility when the menu icon is clicked. This test
         * has two expectations: does the menu display when
         * clicked and does it hide when clicked again.
         */

        var menuToggle;

        beforeEach(function(){
            menuToggle = $('.menu-icon-link').eq(0);
        });


        it('should toggle menu visibility on menu icon click', function() {
            menuToggle.click();
            expect($('body').hasClass('menu-hidden')).toBeFalsy();
            menuToggle.click();
            expect($('body').hasClass('menu-hidden')).toBeTruthy();
        });

    });

    /* Test suite */
    describe('Initial Entries', function() {

        /* This test that ensures when the loadFeed
         * function is called and completes its work, there is at least
         * a single .entry element within the .feed container. Is implemented asynchrously.
         */
        beforeEach(function(done) {
            loadFeed(0, done);
        });

        it('at least one entry in the feed', function() {
            expect($('.feed .entry-link').children('.entry').length).toBeGreaterThan(0);
        });

     });

    /* Test suite  */
    describe('New Feed Selection', function() {
    //guidance from: https://discussions.udacity.com/t/trouble-with-testing-the-entries-existence-in-asychronous-test/19247/2

        /*Test that ensures when a new feed is loaded
         * by the loadFeed function that the content actually changes.
         * Remember, loadFeed() is asynchronous.
         */

        var tempFeed1, tempFeed2;
        
        beforeEach(function(done) {
            loadFeed(0, function() {
                tempFeed1 = $('.feed').html();       
                done();  
            });  
        });
        
        it('changes the feed html', function(done) {
            loadFeed(1, function() {
                tempFeed2 = $('.feed').html();                        
                expect(tempFeed1).not.toBe(tempFeed2);
                done();  
            });  
        });
    });

}());
